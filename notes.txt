ARAKNADIA

Bencode (pronounced Bee-encode) is a serialization format used in the BitTorrent protocol. 
It is used in torrent files and in communication between trackers and peers.
BASICALLY: is the encoding used by the peer-to-peer file sharing system BitTorrent for storing and transmitting loosely structured data.

Bencode supports four data types:
  - strings
  - integers
  - arrays
  - dictionaries (associative arrays)

Bencoding is most commonly used in torrent files, and as such is part of the BitTorrent specification. 

- Strings are encoded as <length>:<contents>. For example, the string "hello" is encoded as "5:hello".
- Integers are encoded as i<number>e. For example, 52 is encoded as i52e and -52 is encoded as i-52e.
- Lists are encoded as l<bencoded_elements>e. For example, ["hello", 52] would be encoded as l5:helloi52ee. Note that there are 
  no separators between the elements.
- A dictionary is encoded as d<key1><value1>...<keyN><valueN>e. <key1>, <value1> etc. correspond to the bencoded keys & values. 
  The keys are sorted in lexicographical order and must be strings. For example, {"hello": 52, "foo":"bar"} would be encoded as
  d3:foo3:bar5:helloi52ee (note that the keys were reordered).


A torrent file (also known as a metainfo file) that contains metadata about files and folders to be distributed, and usually also a 
list of the network locations of trackers, which are computers that help participants in the system find each other and form efficient 
distribution groups called swarms. Torrent files normally have the extension .torrent.
  With the help of a torrent file, one can download small parts of the original file from computers that have already downloaded it. These 
"peers" allow for downloading of the file in addition to, or in place of, the primary server. A torrent file does not contain the content 
to be distributed; it only contains information about those files, such as their names, folder structure, sizes, and cryptographic hash values 
for verifying file integrity.
  MAIN ADVANTAGE OF TORRENT FILES: The torrent system has been created to ease the load on central servers, as instead of having individual 
clients fetch files from the server, torrent can crowd-source the bandwidth needed for the file transfer and reduce the time needed to 
download large files. Many free/freeware programs and operating systems, such as the various Linux distributions offer a torrent download 
option for users seeking the aforementioned benefits.
  Once a peer obtains a certain chunk, that chunk is usually immediately made available for download by others in the swarm. In this way, the
burden on the network is spread among the downloaders, rather than concentrating at a central distribution hub or cluster.


TORRENTING IS LEGAL. PIRACY IS NOT.
There's a difference.


A torrent file is a bencoded dictionary with the following keys and values:
- announce:
  URL to a "tracker" (see PS on BitTorrent tracker below), which is a central server that keeps track of peers participating in the sharing
of a torrent.
- info:
  This maps to a dictionary whose keys are very dependent on whether one or more files are being shared:
  - files: a list of dictionaries each corresponding to a file (only when multiple files are being shared). Each dictionary has the 
    following keys:
    - length: size of the file in bytes.
    - path: a list of strings corresponding to subdirectory names, the last of which is the actual file name
  - length: size of the file in bytes (only when one file is being shared though)
  - name: suggested filename where the file is to be saved (if one file)/suggested directory name where the files are to be saved 
    (if multiple files)
  - piece length: number of bytes per piece. This is commonly 2^8 KiB = 256 KiB = 2,62,144 B.
  - pieces: a hash list, i.e., a concatenation of each piece's SHA-1 hash. As SHA-1 returns a 160-bit hash, pieces will be a string 
    whose length is a multiple of 160 bits i.e. 20 bytes. If the torrent contains multiple files, the pieces are formed by concatenating the files 
    in the order they appear in the files dictionary (i.e., all pieces in the torrent are the full piece length except for the last piece, which may 
    be shorter).

[PS - basically, if you have a single file, structure will be -

- announce
- info:
    length: size of the file in bytes, for single-file torrents
    name: suggested name to save the file / directory as
    piece length: number of bytes in each piece
    pieces: concatenated SHA-1 hashes of each piece
]

All strings must be UTF-8 encoded, except for pieces, which contains binary data.

A torrent is uniquely identified by an infohash, a SHA-1 hash calculated over the contents of the info dictionary in bencode form. Any changes 
to other portions of the torrent do not affect the hash


PS - A BitTorrent tracker is a special type of server that assists in the communication between peers using the BitTorrent protocol.
In peer-to-peer file sharing, a software client on an end-user PC requests a file, and portions of the requested file residing on peer 
machines are sent to the client, and then reassembled into a full copy of the requested file. The "tracker" server keeps track of where file 
copies reside on peer machines, which ones are available at time of the client request, and helps coordinate efficient transmission and 
reassembly of the copied file.


PIECES EXPLAINED:
"pieces" field is of type string, but its content is actually binary data. When you open the torrent file with a text editor, you'll see weird 
characters, because in a text editor, each byte is shown on screen as a character (remember the ASCII table) and not all values correspond to 
readable characters.

So, if we treat this string as a sequence of bytes, the first 20 of them will be the first piece hash, next 20 will be the second piece hash. etc. 
When we say byte, it's just a number between 0 and 255 (because we store it as an 8 bit unsigned integer)

So a piece hash could look like this as a sequence of bytes:
[232, 118, 246, 122, 42, 136, 134, 232, 243, 107, 19, 103, 38, 195, 15, 162, 151, 3, 2, 45]

It's just 20 numbers. when we print each number in hexadecimal format, it will look like this:
e876f67a2a8886e8f36b136726c30fa29703022d

Because 232 is represented as 0xe8 in hexadecimal (16^0 * 8 + 16 ^ 1 * 14) and we omit the 0x part
since we use 2 characters to print each byte, the printed piece hash will be 40 characters long
